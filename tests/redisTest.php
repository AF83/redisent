<?php

require_once '../redisent.php';

/**
 * Test class for redisent.
 * Generated by PHPUnit on 2010-12-29 at 17:41:37.
 */
class redisentTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var redisent
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Redis();
        $this->object->connect("localhost", 6379);
        $this->object->select(2);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testRedisConnection()
    {

        $this->assertArrayHasKey("redis_version", $this->object->info());
    }
    
    public function testSet()
    {   
        $key="key";
        $val= "value";
        $resp = $this->object->set($key,$val);
        $this->assertEquals($resp ,"OK");
        $resp = $this->object->get($key);
        $this->assertEquals($resp ,$val);
    }
    
    public function testBigSet()
    {   
        $key="key";
        $val= str_pad("",50000,"value");
        $resp = $this->object->set($key,$val);
        $this->assertEquals($resp ,"OK");
        $resp = $this->object->get($key);
        $this->assertEquals($resp ,$val);
    }
    
    
    public function testBinarySet()
    {
        $key="key";
        $value = 
        "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";
        $resp = $this->object->set($key,base64_decode( $value));
        $this->assertEquals($resp ,"OK");
        $resp = $this->object->get($key);
        $this->assertEquals(base64_encode($resp) , preg_replace("/[^a-zA-Z0-9s\+\/]/", "", $value)."==");
    }
    
    public function testHsetOnExistingNormalKey()
    {   

            $key="key";
            $val= "value";
             $this->assertEquals($resp = $this->object->hset($key,"a","1") ,false);
    }
    
    
    public function testHset()
    {   
        $key="hashkey";
        $val= "value";
        $fields= array(array("a",1),array("b",2));
        foreach ($fields as $field) $this->object->hset($key,$field[0], $field[1]);
        $this->assertEquals($this->object->hget($key,"b") ,2);
    }
    
    
    public function testBigHset()
    {   
        $key="hashkey";
        $val= str_pad("",5000000,"value"); 
        $this->object->hset($key,"b", $val);
        $this->assertEquals($this->object->hget($key,"b") ,$val);
    }
    
    public function testMget()
    {   
        $keyvals=array("key1","key2", "key3");
        foreach ($keyvals as $keyval) $this->object->set($keyval,$keyval);
        $this->assertEquals($this->object->mget($keyvals), $keyvals);
    }
    
    public function testExists()
    {  
        $keys=array("key", "key1","key2", "key3", "hashkey");
        foreach ($keys as $key)  $this->assertEquals($this->object->exists($key),true);
        
        $this->assertEquals($this->object->exists("InExistantKey"),false);
    }
    
    public function testKeys()
    {  
        $keys=array("hashkey", "key", "key1","key2", "key3");
        $resp= $this->object->getKeys("*");
        foreach ($keys as $key)  $this->assertEquals($key,asort($resp));
        $resp= $this->object->getKeys("hashkey");
        $this->assertEquals($resp, array("hashkey"));
        $resp= $this->object->getKeys("InExistantKey*");
        $this->assertEquals($resp,array());
    }
    
    public function testDel()
    {  
        $keys=array("key", "key1","key2", "key3", "hashkey");
        foreach ($keys as $key)  $this->object->delete($key);
        foreach ($keys as $key)  $this->assertEquals($this->object->exists($key),false);
    }
    
}
?>
